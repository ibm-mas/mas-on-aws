---
# 0. Fail if required parameters are not set
# -----------------------------------------------------------------------------
- name: "Fail if db2wh_meta_storage_class has not been provided"
  when: db2wh_meta_storage_class is not defined or db2wh_meta_storage_class == ""
  fail:
    msg: "db2wh_meta_storage_class property has not been set"

- name: "Fail if db2wh_user_storage_class has not been provided"
  when: db2wh_user_storage_class is not defined or db2wh_user_storage_class == ""
  fail:
    msg: "db2wh_user_storage_class property has not been set"

- name: "Fail if db2wh_backup_storage_class has not been provided"
  when: db2wh_backup_storage_class is not defined or db2wh_backup_storage_class == ""
  fail:
    msg: "db2wh_backup_storage_class property has not been set"

- name: "Fail if db2wh_logs_storage_class has not been provided"
  when: db2wh_logs_storage_class is not defined or db2wh_logs_storage_class == ""
  fail:
    msg: "db2wh_logs_storage_class property has not been set"

- name: "Fail if db2wh_temp_storage_class has not been provided"
  when: db2wh_temp_storage_class is not defined or db2wh_temp_storage_class == ""
  fail:
    msg: "db2wh_temp_storage_class property has not been set"


# 1. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "mas_instance_id ................. {{ mas_instance_id | default('<undefined>') }}"
      - "mas_config_dir .................. {{ mas_config_dir | default('<undefined>')  }}"
      - "mas_config_scope ................ {{ mas_config_scope | default('<undefined>')  }}"
      - "mas_workspace_id ................ {{ mas_workspace_id | default('<undefined>')  }}"
      - "mas_application_id .............. {{ mas_application_id | default('<undefined>')  }}"

      - "db2wh_namespace ................. {{ db2wh_namespace }}"
      - "db2wh_instance_name ............. {{ db2wh_instance_name }}"

      - "db2wh_meta_storage_class  ....... {{ db2wh_meta_storage_class }}"
      - "db2wh_meta_storage_size_gb ...... {{ db2wh_meta_storage_size_gb }}"
      - "db2wh_user_storage_class ........ {{ db2wh_user_storage_class }}"
      - "db2wh_user_storage_size_gb ...... {{ db2wh_user_storage_size_gb }}"
      - "db2wh_backup_storage_class ...... {{ db2wh_backup_storage_class }}"
      - "db2wh_backup_storage_size_gb  ... {{ db2wh_backup_storage_size_gb }}"
      - "db2wh_logs_storage_class ........ {{ db2wh_logs_storage_class }}"
      - "db2wh_logs_storage_size_gb  ..... {{ db2wh_logs_storage_size_gb }}"
      - "db2wh_temp_storage_class ........ {{ db2wh_temp_storage_class }}"
      - "db2wh_temp_storage_size_gb  ..... {{ db2wh_temp_storage_size_gb }}"

      - "db2wh_version ................... {{ db2wh_version }}"
      - "db2wh_table_org ................. {{ db2wh_table_org }}"
      - "db2wh_dbname .................... {{ db2wh_dbname }}"
      - "db2wh_cpu_limits ................ {{ db2wh_cpu_limits }}"
      - "db2wh_memory_limits ............. {{ db2wh_memory_limits }}"
      - "db2wh_node_label ................ {{ db2wh_node_label }}"
      - "db2wh_workload .................. {{ db2wh_workload }}"
      - "db2wh_num_pods .................. {{ db2wh_num_pods }}"
      - "db2wh_mln_count ................. {{ db2wh_mln_count }}"

      - "db2wh_jdbc_username ............. {{ db2wh_jdbc_username }}"
      - "db2wh_jdbc_password ............. Found in 'c-{{ db2wh_instance_name }}-instancepassword' secret under '{{ db2wh_namespace }}' namespace"


# 2. Create a Db2 instance
# -----------------------------------------------------------------------------
- name: "Create db2wh instance"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/{{ cpd_version }}/db2ucluster.yaml.j2') | from_yaml }}"
  register: _db2_cluster_result

# Wait for the cluster to be ready
- name: "Wait for db2wh instance to be ready (5m delay)"
  community.kubernetes.k8s_info:
    api_version: db2u.databases.ibm.com/v1
    name: "{{ db2wh_instance_name | lower }}"
    namespace: "{{ db2wh_namespace }}"
    kind: Db2uCluster
  register: db2_cluster_lookup
  until:
    - db2_cluster_lookup.resources | length == 1
    - db2_cluster_lookup.resources[0].status.state == "Ready"
  retries: 24 # Approximately 2 hours before we give up
  delay: 300 # 5 minutes


# 3. Configure a public route for Db2
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  community.kubernetes.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

- name: Lookup db2wh TLS certificates
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: "internal-tls"
    namespace: "{{ db2wh_namespace }}"
  register: _db2u_instance_certificates

- name: Lookup db2wh Engn Service
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Service
    name: "c-{{db2wh_instance_name | lower}}-db2u-engn-svc"
    namespace: "{{ db2wh_namespace }}"
  register: _db2u_instance_engn_svc
  until:
    - _db2u_instance_engn_svc.resources[0] is defined
  retries: 15 # approx 5 minutes before we give up
  delay: 20

- name: Set Db2wh certificates as Facts
  set_fact:
    # We need to use certificate.pem rather than tls.crt when we create the JdbcCfg for MAS
    db2wh_pem: "{{ _db2u_instance_certificates.resources[0].data['ca.crt'] | b64decode }}"
    db2wh_tls_crt: "{{ _db2u_instance_certificates.resources[0].data['tls.crt'] | b64decode }}"
    db2wh_tls_key: "{{ _db2u_instance_certificates.resources[0].data['tls.key'] | b64decode }}"
  when:
    - _db2u_instance_certificates is defined
    - (_db2u_instance_certificates.resources | length > 0)

# not using nodePort anymore, instead using the ssl-server targetPort that's always 50001
- name: Set Db2wh TLS targetPort
  set_fact:
    db2wh_tls_nodeport: "{{ item.targetPort }}"
  when: item.name == 'ssl-server'
  loop:
    "{{_db2u_instance_engn_svc.resources[0].spec.ports}}"

- name: "Create Db2 Warehouse route"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd40/tlsroute.yml') }}"


# 4. Create JDBCCfg yml definition
# -----------------------------------------------------------------------------
- name: Load variables to use in JDBCCfg
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  include_vars: "vars/jdbccfg/{{ mas_config_scope }}.yml"

- name: Lookup db2wh instance password
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: "c-{{db2wh_instance_name | lower }}-instancepassword"
    namespace: "{{db2wh_namespace}}"
  register: _db2u_instance_password

- name: Set Facts for JdbcCfg
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  set_fact:
    db2wh_instance_id: "{{ db2wh_instance_name }}"
    db2wh_certificate: "{{ _db2u_instance_certificates.resources[0].data['ca.crt'] | b64decode }}"
    db2wh_jdbc_password: "{{ _db2u_instance_password.resources[0].data.password | b64decode }}"
    db2wh_jdbc_url: "jdbc:db2://c-{{db2wh_instance_name | lower}}-db2u-engn-svc.{{ db2wh_namespace }}.svc:{{db2wh_tls_nodeport}}/{{db2wh_dbname}}:sslConnection=true;"

- name: Create JDBCCfg yml definition into {{ mas_config_dir }} folder
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  ansible.builtin.template:
    src: suite_jdbccfg.yml
    dest: "{{ mas_config_dir }}/jdbc-{{ db2wh_instance_name | lower }}-{{ db2wh_namespace }}.yml"
