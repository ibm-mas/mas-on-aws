---
# 1. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Namespace .................... {{ cpd_meta_namespace }}"
      - "Storage class ................ {{ cpd_storage_class }}"
      - "CP4D services ................ {{ cpd_services }}"

# 2. Task to create a CA-Cert in namespace which can be used as root CA for other certificates in same NS
# -----------------------------------------------------------------------------
- name : "Create a ca certificate in {{ cpd_meta_namespace }}"
  vars:
    cluster_name:  "{{ lookup('env', 'CLUSTER_NAME') }}"
    base_domain:  "{{ lookup('env', 'BASE_DOMAIN') }}"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/ca-cert.yml') }}"
    wait: yes
    wait_condition:
      status: 'True'
      type: Ready

# 3. Task to create issuer in namespace which will be used to create other application related certificates
# -----------------------------------------------------------------------------
- name : "Create a issuer  in {{ cpd_meta_namespace }}"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/issuer.yml') }}"
    wait: yes
    wait_condition:
      status: 'True'
      type: Ready

# 4. CP4D certificate
# -----------------------------------------------------------------------------
- name : "Create a server certificate in {{ cpd_meta_namespace }}"
  vars:
    cluster_name:  "{{ lookup('env', 'CLUSTER_NAME') }}"
    base_domain:  "{{ lookup('env', 'BASE_DOMAIN') }}"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cert.yml') }}"
    wait: yes
    wait_condition:
      status: 'True'
      type: Ready

# 5. Create external tls secret
# -----------------------------------------------------------------------------
- name :  "Create external tls secret"
  include_tasks: secret.yml

# 6. Install CP4D Services
# -----------------------------------------------------------------------------
- name: "Install CPDServices"
  vars:
    service_name: "{{ item }}"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpdservice.yml') }}"
  with_items: "{{ cpd_services }}"


# 7. Wait for CP4D Services to be ready
# -----------------------------------------------------------------------------
- include_tasks: wait_for_services.yml


# 8. Provide CP4D dashboard URL
# -----------------------------------------------------------------------------
- name: "Obtain CP4D dashboard URL"
  community.kubernetes.k8s_info:
    api_version: v1
    name: "{{ cpd_meta_namespace }}-cpd"
    namespace: "{{cpd_meta_namespace}}"
    kind: Route
  register: cpd_route_lookup

- debug:
    msg:
      - "CP4D Dashboard ................. https://{{cpd_route_lookup.resources[0].spec.host}}"
      - "CP4D Username .................. admin"
      - "CP4D Password .................. password"
